import 'dart:math';
import 'package:flutter/material.dart';
import 'package:montyhall/help.dart';
import 'package:montyhall/history.dart';

void main() {
  runApp(const MontyHallApp());
}

class MontyHallApp extends StatelessWidget {
  const MontyHallApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Monty Hall Demo',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: const MontyHallPage(),
    );
  }
}

class MontyHallPage extends StatefulWidget {
  const MontyHallPage({super.key});

  @override
  State<MontyHallPage> createState() => _MontyHallPageState();
}

class _MontyHallPageState extends State<MontyHallPage> {
  // –ù–æ–º–µ—Ä–∞ –¥–≤–µ—Ä–µ–π: 0, 1, 2
  // doorWithPrize: –∑–∞ –∫–∞–∫–æ–π –¥–≤–µ—Ä—å—é –ø—Ä–∏–∑
  // firstChoice: –ø–µ—Ä–≤–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–≤–µ—Ä—å –∏–≥—Ä–æ–∫–æ–º
  // revealedDoor: –¥–≤–µ—Ä—å, –∫–æ—Ç–æ—Ä—É—é –æ—Ç–∫—Ä—ã–ª ¬´–≤–µ–¥—É—â–∏–π¬ª
  // finalChoice: –∏—Ç–æ–≥–æ–≤–∞—è –¥–≤–µ—Ä—å –∏–≥—Ä–æ–∫–∞ (–ø—Ä–∏ "—Å–º–µ–Ω–µ" –∏–ª–∏ –ø—Ä–∏ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏)
  // gameStage: 0 - –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –¥–≤–µ—Ä—å; 1 - –¥–≤–µ—Ä—å –≤—ã–±—Ä–∞–Ω–∞, –≤–µ–¥—É—â–∏–π –æ—Ç–∫—Ä—ã–ª; 2 - –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞

  late int doorWithPrize;
  int? firstChoice;
  int? revealedDoor;
  int? finalChoice;
  int gameStage = 0; // 0, 1, 2

  @override
  void initState() {
    super.initState();
    _resetGame();
    WidgetsBinding.instance
        .addPostFrameCallback((v) => showDialog(context: context, builder: (context) => MontyHallRulesDialog()));
  }

  void _resetGame() {
    // –°–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–∏—Ä–∞–µ–º –æ–¥–Ω—É –∏–∑ —Ç—Ä—ë—Ö –¥–≤–µ—Ä–µ–π –¥–ª—è –ø—Ä–∏–∑–∞.
    doorWithPrize = Random().nextInt(3);

    firstChoice = null;
    revealedDoor = null;
    finalChoice = null;

    gameStage = 0;
    setState(() {});
  }

  void _chooseDoor(int index) {
    if (gameStage == 0) {
      // –ò–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–ª –¥–≤–µ—Ä—å –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑
      setState(() {
        firstChoice = index;
        _revealMontyDoor();
        gameStage = 1;
      });
    } else if (gameStage == 1) {
      // –ò–≥—Ä–æ–∫ –¥–µ–ª–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä
      setState(() {
        finalChoice = index;
        gameStage = 2;
      });
      bool isWin = (finalChoice == doorWithPrize);

      _gameHistory.add(
        GameResult(
          doorWithPrize: doorWithPrize,
          finalChoice: finalChoice!,
          isWin: isWin,
          playedAt: DateTime.now(),
        ),
      );
    }
  }

  void _revealMontyDoor() {
    // –í–µ–¥—É—â–∏–π –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–¥–Ω—É –∏–∑ –¥–≤—É—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–≤–µ—Ä–µ–π, –∑–∞ –∫–æ—Ç–æ—Ä–æ–π —Ç–æ—á–Ω–æ –Ω–µ—Ç –ø—Ä–∏–∑–∞
    List<int> possibleDoorsToReveal = [0, 1, 2];
    possibleDoorsToReveal.remove(firstChoice);

    // –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–≤–µ—Ä—å —Å –ø—Ä–∏–∑–æ–º, –µ—Å–ª–∏ –æ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ
    if (possibleDoorsToReveal.contains(doorWithPrize)) {
      if (possibleDoorsToReveal.length > 1) {
        possibleDoorsToReveal.removeWhere((door) => door == doorWithPrize);
      }
    }

    // –†–∞–Ω–¥–æ–º–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
    revealedDoor = possibleDoorsToReveal[Random().nextInt(possibleDoorsToReveal.length)];
  }

  String _getDoorEmoji(int doorIndex) {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ, —á—Ç–æ –º—ã —É–≤–∏–¥–∏–º –∑–∞ –¥–≤–µ—Ä—å—é (–µ—Å–ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞)
    // - \u{1F410} ‚Äî –∫–æ–∑–æ—á–∫–∞
    // - \u{1F389} ‚Äî –ø—Ä–∏–∑ (–∫–æ–Ω—Ñ–µ—Ç—Ç–∏/–ø–æ–±–µ–¥–∞)

    // –ï—Å–ª–∏ –∏–≥—Ä–∞ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –¥–≤–µ—Ä—å ‚Äì —ç—Ç–æ —Ç–∞, –∫–æ—Ç–æ—Ä—É—é –æ—Ç–∫—Ä—ã–ª ¬´–≤–µ–¥—É—â–∏–π¬ª:
    if (gameStage >= 1 && doorIndex == revealedDoor) {
      return doorIndex == doorWithPrize ? 'üéâ' : 'üêê';
    }

    // –ï—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –∑–∞ —ç—Ç–æ–π –¥–≤–µ—Ä—å—é
    if (gameStage == 2) {
      if (doorIndex == doorWithPrize) {
        return 'üéâ';
      } else {
        return 'üêê';
      }
    }

    // –ò–Ω–∞—á–µ –¥–≤–µ—Ä—å ¬´–∑–∞–∫—Ä—ã—Ç–∞¬ª, –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
    return '';
  }

  Color _getDoorColor(int doorIndex) {
    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–≤–µ—Ä—å
    if (doorIndex == firstChoice && gameStage == 0) {
      return Colors.orange;
    }

    // –ö–æ–≥–¥–∞ –∏–≥—Ä–∞ –≤ —Å—Ç–∞–¥–∏–∏ 1 (–ø–µ—Ä–≤–∞—è –¥–≤–µ—Ä—å –≤—ã–±—Ä–∞–Ω–∞, –æ–¥–Ω–∞ –¥–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞ –≤–µ–¥—É—â–∏–º),
    // –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫—É, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –∫–ª–∏–∫–Ω–µ—Ç –Ω–∞ –Ω–æ–≤—É—é –¥–≤–µ—Ä—å
    if (gameStage == 1 && doorIndex == firstChoice) {
      // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –Ω–∞ —ç—Ç–æ–π –¥–≤–µ—Ä–∏
      return Colors.orange;
    }

    if (gameStage == 2 && doorIndex == finalChoice) {
      // –ï—Å–ª–∏ —ç—Ç–∞ –¥–≤–µ—Ä—å –æ–∫–∞–∑–∞–ª–∞—Å—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –≤—ã–±–æ—Ä–æ–º
      // –ú–æ–∂–Ω–æ –ø–æ–¥—Å–≤–µ—Ç–∏—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞—è, —á—Ç–æ —ç—Ç–æ –∏—Ç–æ–≥–æ–≤—ã–π –≤—ã–±–æ—Ä
      return Colors.green;
    }

    // –ï—Å–ª–∏ –¥–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞ –≤–µ–¥—É—â–∏–º
    if (gameStage >= 1 && doorIndex == revealedDoor) {
      return Colors.grey.shade300;
    }

    return Colors.blue;
  }

  void _showHistory() {
    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏—Å—Ç–æ—Ä–∏–µ–π:
    // Navigator.of(context).push(...) –∏–ª–∏ showDialog(...)
    Navigator.of(context).push(
      MaterialPageRoute(
        builder: (_) => GameHistoryPage(gameHistory: _gameHistory),
      ),
    );
  }

  final List<GameResult> _gameHistory = [];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Monty Hall Game'),
        actions: [
          ElevatedButton(
              onPressed: () {
                showDialog(context: context, builder: (context) => MontyHallRulesDialog());
              },
              child: Text('–ü—Ä–∞–≤–∏–ª–∞')),
          SizedBox(width: 4),
          ElevatedButton(
            onPressed: _showHistory,
            child: const Text('–ò—Å—Ç–æ—Ä–∏—è'),
          ),
        ],
      ),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          const Text(
            '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–≤–µ—Ä–µ–π:',
            style: TextStyle(fontSize: 20),
          ),
          const SizedBox(height: 20),

          // –†–∏—Å—É–µ–º 3 –¥–≤–µ—Ä–∏
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: List.generate(3, (index) {
              return InkWell(
                onTap: () => _chooseDoor(index),
                child: Container(
                  width: 80,
                  height: 120,
                  alignment: Alignment.center,
                  decoration: BoxDecoration(
                    color: _getDoorColor(index),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Text(
                    _getDoorEmoji(index),
                    style: const TextStyle(fontSize: 40),
                  ),
                ),
              );
            }),
          ),

          const SizedBox(height: 40),

          // –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
          ElevatedButton(
            onPressed: _resetGame,
            child: const Text('–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ'),
          ),

          const SizedBox(height: 20),

          // –ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
          if (gameStage == 2) ...[
            Text(
              finalChoice == doorWithPrize ? '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –Ω–∞—à–ª–∏ –ø—Ä–∏–∑! üéâ' : '–£–≤—ã, –ø—Ä–∏–∑ –±—ã–ª –Ω–µ –∑–¥–µ—Å—å... üòî',
              style: const TextStyle(fontSize: 20),
            ),
          ],
        ],
      ),
    );
  }
}
